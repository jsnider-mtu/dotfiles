#!/bin/bash

CMD=`basename $0` # Who am I?

if [[ ! -d ~/.a ]]; then
  mkdir ~/.a
fi

show_help()
{
    echo "Usage: $CMD <URL> [FORCE={0/1}]"
}

find_unique_filename()
{
    if [ $# -ne 2 ]; then
        echo "Fail! -- Expecting 2 arguments! ==> $@"
        return 1 # non-zero as false
    fi
    local UNIQUE_FILENAME_VAR=$1
    local FILENAME=$2
    if [ -f $FILENAME ]; then
        COUNTER=0
        while [ -f $FILENAME ]; do
            echo "File exists: `basename $FILENAME`"
            local NEW_FILENAME=`echo $FILENAME | sed "s#\(.*\)-[0-9]\+\.#\1-$COUNTER\.#g"`
            if [ "$NEW_FILENAME" == "$FILENAME" ]; then
                NEW_FILENAME=`echo $FILENAME | sed "s#\(.*\)\.#\1-$COUNTER\.#g"`
            fi
            FILENAME=$NEW_FILENAME
            COUNTER=$(( $COUNTER + 1 ))
        done
        echo "Next unique filename: `basename $FILENAME`"
    fi
    eval "$UNIQUE_FILENAME_VAR=$FILENAME"
}

cleanup()
{
    if [ $# -ne 3 ]; then
        echo "Fail! -- Expecting 3 argument! ==> $@"
        return 1 # non-zero as false
    fi
    local PLACEHOLDER_TEMP=$1
    local PARTIAL_TEMP=$2
    local DONE_VAR=$3
    local DONE_VALUE=0
    eval "DONE_VALUE=\$$DONE_VAR"
    if [ $DONE_VALUE -eq 0 ]; then
        if [ -f $PLACEHOLDER_TEMP ]; then
            echo  "Safely removing placeholder temp file ==> $PLACEHOLDER_TEMP"
            rm -f $PLACEHOLDER_TEMP
        fi
    fi
    if [ -f $PARTIAL_TEMP ]; then
        echo  "Safely removing partial temp file ==> $PARTIAL_TEMP"
        rm -f $PARTIAL_TEMP
    fi
}

highestres() {

  curl -s -c ~/.tmp/cookies "$1"|grep RESOLUTION|sed 's/^.*,NAME="\(.*\)"$/\1/'|sort -h|tail -1

}

leadingzeroes() {

  if [[ $1 -lt 10 ]]; then
    LEAD=0
    LEADC=0
  elif [[ $1 -lt 100 ]]; then
    LEAD=1
    LEADC=1
  elif [[ $1 -lt 1000  ]]; then
    LEAD=10
    LEADC=1
  fi
#  echo "DEBUG: LEAD = $LEAD"

  # Add them
  LIST=''
  for ((i=0;i<=LAST_NUM;i++)); do
    if [[ $i -lt $(($LEAD*10)) ]]; then
      LIST=$LIST`printf "/home/josh/.tmp/hls-${HIGHEST_RES}0%.0s$i.ts " $LEADC`
    else
      : # do nothing
    fi
  done
#  echo "DEBUG: LIST = $LIST"

  # Move the files
  for destFile in $LIST; do
    if [[ ! -f $destFile ]]; then
      # determine number, go from there
      NUM=`echo $destFile | cut -dp -f3 | cut -d\. -f1`
      mv ~/.tmp/hls-$HIGHEST_RES${NUM#0}.ts $destFile
#      echo "DEBUG: I moved ~/.tmp/hls-$HIGHEST_RES${NUM%0}.ts to $destFile"
    fi
  done

}

if [ $# -ne 1 -a $# -ne 2 ]; then
    echo "Fail! -- Expecting 1 or 2 arguments! ==> $@"
    show_help
    exit 1
fi

if [ -z "`which curl`" ]; then
    echo "Fail! -- Requires \"curl\""
    echo "Hint: sudo aptitude install curl"
    exit 1
fi

URL=$1
FORCE=$2

if [ -z "$FORCE" ]; then
    FORCE=0
fi

echo ""
echo "Extracting video URL from.. ==> $URL"

# Should probably check for space on file system before the download is attempted
mkdir ~/.tmp 2>/dev/null

# Changing this declaration to account for site changes
# For one, returned html is pre-formatted, so just do the
# curl  and grep and be done with it
HLS_URL=`curl -s -c ~/.tmp/cookies "$URL"       | # download HTML using curl
        grep 'html5player.setVideoHLS'        | # locate lines with "html5player.setVideoHLS"
        cut -d\' -f2`                           # clean up a little

# Need to use HLS_URL and xvres-show to get the highest resolution
# Then grab that manifest file to get a list of segments (or just the last in the enumeration
# since they've already standardized the naming scheme for me)
HIGHEST_RES=`highestres "$HLS_URL"`  # This needs to actually recreate the URL entirely
#echo "DEBUG: HIGHEST_RES = $HIGHEST_RES"
if [[ $HIGHEST_RES =~ ^[23]{1} ]]; then  # If highest resolution begins with 2 or 3 then skip this video
  # Do cleanup early and exit
  rm -r ~/.tmp
  echo -e "\nNot high enough quality, fuck this video\n"
  exit 1
fi

# Need to form the next url and then parse the response for last segment
# second to last line
#echo "DEBUG: HLS_URL = $HLS_URL"
HIGHEST_URL=`echo "${HLS_URL/hls.m3u8/hls-$HIGHEST_RES.m3u8}"` # URL Encode fixes
#echo "DEBUG: HIGHEST_URL = $HIGHEST_URL"

LAST_SEG=`curl -s -c ~/.tmp/cookies "$HIGHEST_URL"              | # download HTML using curl
          tail -2|head -1`                                      # just need the last segment
#echo "DEBUG: LAST_SEG = $LAST_SEG"

# Need to grab any and all parameters at the end of the URL
if [[ $LAST_SEG =~ .*\?.* ]]; then
  PARAMETERS=`echo $LAST_SEG|cut -d'?' -f2-`
#  echo "DEBUG: PARAMETERS = $PARAMETERS"
  REAL_LAST_SEG=`echo $LAST_SEG|cut -d'?' -f1`
#  echo "DEBUG: REAL_LAST_SEG = $REAL_LAST_SEG"
fi

# Now let's generate the enumerated filename list and download in parallel
if [[ -z $PARAMETERS ]]; then
  LAST_NUM=`echo $LAST_SEG|rev|sed 's/^st\.\([0-9]\{1,\}\).*$/\1/'|rev`
#  echo "DEBUG: LAST_NUM = $LAST_NUM"
  for ((i=0;i<=LAST_NUM;i++)); do echo ${HLS_URL/hls.m3u8/hls-$HIGHEST_RES$i}.ts; done | xargs -n 1 -P 8 wget -q -P ~/.tmp
  leadingzeroes $LAST_NUM
else
  LAST_NUM=`echo $REAL_LAST_SEG|rev|sed 's/^st\.\([0-9]\{1,\}\).*$/\1/'|rev`
#  echo "DEBUG: LAST_NUM = $LAST_NUM"
  for ((i=0;i<=LAST_NUM;i++)); do echo ${HLS_URL/hls.m3u8/hls-$HIGHEST_RES${i}.ts}; done | xargs -n 1 -P 8 wget -q -P ~/.tmp
  for ((i=0;i<=LAST_NUM;i++)); do mv ~/.tmp/hls-$HIGHEST_RES${i}.ts?$PARAMETERS ~/.tmp/hls-$HIGHEST_RES${i}.ts; done
  leadingzeroes $LAST_NUM
fi

cat $(ls -vl ~/.tmp/*ts|awk '{print $9}'|xargs) > ~/.a/${URL##*/}.ts
rm -r ~/.tmp

# Now re-encode to get rid of the choppy bits
# This part sucks, replacing with ffmpeg
ffmpeg -loglevel 24 -i ~/.a/${URL##*/}.ts -acodec copy -vcodec copy ~/.a/${URL##*/}_${HIGHEST_RES}.mp4

echo ""
echo "Done, you motherfucker. Cleaning up now."
rm ~/.a/${URL##*/}.ts
